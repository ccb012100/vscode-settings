{
    // Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Resolve<T> type": {
        "prefix": [
            "resolve",
            "Resolve<T>"
        ],
        "body": [
            "type Resolve<T> = T extends Function ? T : {[K in keyof T] : T[K]};",
            "$0"
        ],
        "description": "define the Resolve<T> type"
    },
    "new describe() function": {
        "prefix": [
            "desc-func",
            "df",
            "describe-function"
        ],
        "description": "set up a new 'describe' test function",
        "body": [
            "describe('$1', () => {",
            "    ",
            "})"
        ]
    },
    "new Jest unit test": {
        "prefix": [
            "jest-unit",
            "jest-test"
        ],
        "description": "add a new Jest unit test",
        "body": [
            "it('should ${1:do x} when ${2:y}', () => {",
            "    // arrange",
            "",
            "    // act",
            "",
            "    // assert",
            "    expect.fail('not implemented')",
            "})"
        ]
    },
    "new async Jest unit test": {
        "prefix": [
            "jest-unit-async",
            "jest-test-async"
        ],
        "description": "add a new async Jest unit test",
        "body": [
            "it('should ${1:do x} when ${2:y}', async () => {",
            "    // arrange",
            "    // act",
            "    // assert",
            "    expect.fail('not implemented')",
            "})"
        ]
    },
    "new parameterized Jest unit test": {
        "prefix": [
            "jest-parameterized-unit",
            "jest-parameterized-test"
        ],
        "description": "add a new parameterized Jest unit test",
        "body": [
            "[].forEach((${1:element}) => {",
            "   it('should ${2:do x} when ${3:y}', () => {",
            "       // arrange",
            "",
            "       // act",
            "",
            "       // assert",
            "       expect.fail('not implemented')",
            "   })",
            "})"
        ]
    },
    "new parameterized async Jest unit test": {
        "prefix": [
            "jest-parameterized-unit-async",
            "jest-parameterized-test-async"
        ],
        "description": "add a new parameterized async Jest unit test",
        "body": [
            "[].forEach((${1:element}) => {",
            "   it('should ${2:do x} when ${3:y}', async () => {",
            "       // arrange",
            "",
            "       // act",
            "",
            "       // assert",
            "       expect.fail('not implemented')",
            "   })",
            "})"
        ]
    }
}